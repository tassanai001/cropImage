var app={};!function(){app=angular.module("MainApp",["ngRoute","ngSanitize","ngResource","ngAnimate","mgcrea.ngStrap"]),app.config(["$routeProvider","$locationProvider",function(e,t){t.html5Mode(!1).hashPrefix("!"),e.when("/",{templateUrl:"/views/index.html",controller:"mainCtrl"}).when("/sample",{templateUrl:"/views/sample/sample.html",controller:"sampleCtrl"}).otherwise({redirectTo:"/"})}])}();var spinner={},token="XXX";!function(){toastr.options={closeButton:!1,debug:!1,progressBar:!1,positionClass:"toast-bottom-right",onclick:null,showDuration:"300",hideDuration:"1000",timeOut:"5000",extendedTimeOut:"1000",showEasing:"swing",hideEasing:"linear",showMethod:"fadeIn",hideMethod:"fadeOut"};var e={lines:11,length:23,width:8,radius:40,corners:1,rotate:9,color:"#FFF",speed:1,trail:50,shadow:!1,hwaccel:!0,zIndex:2e9,top:"50%",left:"50%"},t=null;spinner.show=function(){var n=document.getElementById("spinner");null==t?t=new Spinner(e).spin(n):t.spin(n),$.blockUI({message:null,overlayCSS:{backgroundColor:"#5c5c5c"}})},spinner.hide=function(){var e=document.getElementById("spinner");t.stop(e),$.unblockUI()}}(),function(){app.controller("globalCtrl",["$rootScope","$scope",function(e,t){t.pageData=[{Name:"Home"},{Name:"Sample"}],t.directiveTest="HELLO WORLD",e.images="exampleimage.png",$(".upload-btn").on("click",function(){$("#upload-input").click(),$(".progress-bar").text("0%"),$(".progress-bar").width("0%")}),$("#upload-input").on("change",function(){var t=$(this).get(0).files;if(t.length>0){for(var n=new FormData,a=0;a<t.length;a++){var r=t[a];n.append("uploads[]",r,r.name)}$.ajax({url:"/upload/",type:"POST",data:n,processData:!1,contentType:!1,success:function(t){e.images=t,e.cropper.destroy();var n=document.getElementById("image");n.src="uploads/"+e.images,e.initmainMT()},xhr:function(){var e=new XMLHttpRequest;return e.upload.addEventListener("progress",function(e){if(e.lengthComputable){var t=e.loaded/e.total;t=parseInt(100*t),$(".progress-bar").text(t+"%"),$(".progress-bar").width(t+"%"),100===t&&$(".progress-bar").html("Done")}},!1),e}})}})}])}(),function(){app.directive("directiveSample",function(){return{restrict:"AEC",replace:!0,require:"ngModel",scope:!0,link:function(e,t,n,a){a.$render=function(){t.empty(),t.append(a.$viewValue)}}}})}(),function(){Date.prototype.addHours=function(e){return this.setHours(this.getHours()+e),this},app.filter("DateTrick",function(){return function(e){if(null!==e){var t=e.addHours(7);return t}return{}}})}(),function(){app.controller("mainCtrl",["$rootScope","$scope","mainService","searchEngineService",function(e,t,n,a){t.activePage=1,t.initMT=function(){n.GetSample().then(function(e){t.testData=e})},t.SubmitKeyword=function(){a.addKeyword({keywords:t.inputkeywords}).then(function(e){console.log(e)})},e.initmainMT=function(){function t(e){var t=e.target,n=(parseFloat(t.getAttribute("data-x"))||0)+e.dx,a=(parseFloat(t.getAttribute("data-y"))||0)+e.dy;t.style.webkitTransform=t.style.transform="translate("+n+"px, "+a+"px)",t.setAttribute("data-x",n),t.setAttribute("data-y",a)}console.log("---------- initmainMT ----------");var n=document.getElementById("image");n.src="uploads/"+e.images,console.log(n.src);var a=document.querySelectorAll(".preview");e.cropper=new Cropper(n,{ready:function(e,t){var n=this.cloneNode();n.className="",n.style.cssText="display: block;width: 100%;min-width: 0;min-height: 0;max-width: none;max-height: none;",angular.forEach(a,function(e){e.appendChild(n.cloneNode())})},aspectRatio:16/9,crop:function(e){var t=e.detail,n=this.cropper,r=n.getImageData(),o=t.width/t.height;angular.forEach(a,function(e){console.log("elem: ",e);var n=e.getElementsByTagName("img").item(0),a=e.offsetWidth,i=a/o,s=t.width/a;e.style.height=i+"px",n.style.width=r.naturalWidth/s+"px",n.style.height=r.naturalHeight/s+"px",n.style.marginLeft=-t.x/s+"px",n.style.marginTop=-t.y/s+"px"})}}),interact(".draggable").draggable({inertia:!0,restrict:{restriction:"parent",endOnly:!0,elementRect:{top:0,left:0,bottom:1,right:1}},autoScroll:!0,onmove:t,onend:function(e){var t=e.target.querySelector("p");t&&(t.textContent="moved a distance of "+(0|Math.sqrt(e.dx*e.dx+e.dy*e.dy))+"px")}}),window.dragMoveListener=t},t.retateImage=function(t){"left"===t?e.cropper.rotate(-45):e.cropper.rotate(45)},t.getCroppedCanvas=function(){e.cropper.getCroppedCanvas({width:160,height:90}),e.cropper.getCroppedCanvas().toBlob(function(t){var n=new FormData;n.append("croppedImage",t),$.ajax({url:"/upload/getCropp/",method:"POST",data:n,processData:!1,contentType:!1,success:function(t){console.log("----: Upload success :----"),e.images=t,console.log(t);var n=document.getElementById("imagecrop");n.src="uploads/"+t},error:function(){console.log("Upload error")}})})},$(".modal-button").click(function(){var e=$(this).data("target");$("html").addClass("is-clipped"),$(e).addClass("is-active")}),$(".modal-close").click(function(){$("html").removeClass("is-clipped"),$(this).parent().removeClass("is-active")})}])}(),function(){app.factory("mainService",["$http","$q",function(e,t){var n={};return n.GetSample=function(){spinner.show();var n=t.defer();return e({method:"GET",url:"/sample"}).success(function(e){spinner.hide(),n.resolve(e)}).error(function(e){spinner.hide(),n.reject(e)}),n.promise},n}])}(),function(){app.controller("sampleCtrl",["$scope","$modal","sampleService",function(e,t,n){e.activePage=2,e.readSampleData=[],e.createSample=function(){n.createSample().then(function(t){"ERROR"!=t?(toastr.success("การบันทึกสำเร็จ","การบันทึกข้อมูล"),e.readSampleData.push(t)):toastr.warning("การบันทึกผิดพลาด"+t,"การบันทึกข้อมูล")})},e.createNewSample=function(){n.createNewSample(e.modalData).then(function(t){"ERROR"!=t?(toastr.success("การบันทึกสำเร็จ","การบันทึกข้อมูล"),e.readSampleData.push(t)):toastr.warning("การปรับปรุงผิดพลาด"+t,"การปรับปรุงผิดพลาด")})},e.modalData={},e.read=function(e,t){n.readSample(e).then(function(e){t(e)})},e.readAllSample=function(){n.readAllSample().then(function(t){"ERROR"!=t?e.readSampleData=t:toastr.warning("การอ่านข้อมูลผิดพลาด"+t,"การอ่านข้อมูลผิดพลาด")})},e.updateSample=function(){var t=e.currentID,a=e.currentIndex;n.updateSample(e.modalData,t).then(function(t){"ERROR"!=t?e.readSampleData[a]=e.modalData:toastr.warning("การปรับปรุงผิดพลาด"+t,"การปรับปรุงผิดพลาด")})},e.deleteConfirm=function(n,a){e.currentID=n,e.currentIndex=a,t({scope:e,template:"/views/sample/modal/sampleConfirm.html",show:!0})},e.deleteSample=function(){var t=e.currentID,a=e.currentIndex;n.deleteSample(t).then(function(t){"ERROR"!=t?e.readSampleData.splice(a,1):toastr.warning("การลบผิดพลาด"+t,"การลบผิดพลาด")})},e.checkData=function(){switch(e.modalMode){case"create":e.createNewSample();break;case"edit":e.updateSample()}},e.showSample=function(n,a,r){e.modalMode=n,e.currentID=a,e.currentIndex=r;var o=t({scope:e,template:"/views/sample/modal/sampleModal.html",show:!1});switch(n){case"create":e.modalData={},e.modalData.readOnly=!1,o.$promise.then(o.show);break;case"show":e.read(a,function(t){"ERROR"!=t?(o.$promise.then(o.show),e.modalData=t,e.modalData.bCreate=JSON.parse(t.bCreate),e.modalData.readOnly=!0):toastr.warning("การอ่านข้อมูลผิดพลาด"+t,"การอ่านข้อมูลผิดพลาด")});break;case"edit":e.read(a,function(t){"ERROR"!=t?(o.$promise.then(o.show),e.modalData=t,e.modalData.bCreate=JSON.parse(t.bCreate),e.modalData.readOnly=!1):toastr.warning("การอ่านข้อมูลผิดพลาด"+t,"การอ่านข้อมูลผิดพลาด")})}}}])}(),function(){app.factory("sampleService",["$http","$q",function(e,t){var n={};return n.createSample=function(){spinner.show();var n=t.defer();return e({method:"GET",url:"/sample/create",contentType:"application/json; charset=utf-8",dataType:"json",headers:{RequestVerificationToken:token}}).success(function(e){spinner.hide(),n.resolve(e)}).error(function(e){spinner.hide(),n.reject(e)}),n.promise},n.createNewSample=function(n){spinner.show();var a=t.defer();return e({method:"POST",url:"/sample/createnew",contentType:"application/json; charset=utf-8",data:{Name:n.Name,bCreate:n.bCreate},dataType:"json",headers:{RequestVerificationToken:token}}).success(function(e){spinner.hide(),a.resolve(e)}).error(function(e){spinner.hide(),a.reject(e)}),a.promise},n.readAllSample=function(){spinner.show();var n=t.defer();return e({method:"GET",url:"/sample/read",contentType:"application/json; charset=utf-8",dataType:"json",headers:{RequestVerificationToken:token}}).success(function(e){spinner.hide(),n.resolve(e)}).error(function(e){spinner.hide(),n.reject(e)}),n.promise},n.deleteSample=function(n){spinner.show();var a=t.defer();return e({method:"GET",url:"/sample/delete/"+n,contentType:"application/json; charset=utf-8",dataType:"json",headers:{RequestVerificationToken:token}}).success(function(e){spinner.hide(),a.resolve(e)}).error(function(e){spinner.hide(),a.reject(e)}),a.promise},n.readSample=function(n){spinner.show();var a=t.defer();return e({method:"GET",url:"/sample/read/"+n,contentType:"application/json; charset=utf-8",dataType:"json",headers:{RequestVerificationToken:token}}).success(function(e){spinner.hide(),a.resolve(e)}).error(function(e){spinner.hide(),a.reject(e)}),a.promise},n.updateSample=function(n,a){spinner.show();var r=t.defer();return e({method:"POST",url:"/sample/update/"+a,data:{Name:n.Name,bCreate:n.bCreate},contentType:"application/json; charset=utf-8",dataType:"json",headers:{RequestVerificationToken:token}}).success(function(e){spinner.hide(),r.resolve(e)}).error(function(e){spinner.hide(),r.reject(e)}),r.promise},n}])}(),function(){app.factory("searchEngineService",["$http","$q",function(e,t){var n={};return n.addKeyword=function(n){spinner.show();var a=t.defer();return console.log(n),e({method:"POST",url:"/searchengine/addKeyword",contentType:"application/json; charset=utf-8",data:n,dataType:"json",headers:{RequestVerificationToken:token}}).success(function(e){spinner.hide(),a.resolve(e)}).error(function(e){spinner.hide(),a.reject(e)}),a.promise},n}])}();
//# sourceMappingURL=data:application/json;charset=utf8;base64,
