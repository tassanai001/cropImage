var app={};!function(){app=angular.module("MainApp",["ngRoute","ngSanitize","ngResource","ngAnimate","mgcrea.ngStrap"]),app.config(["$routeProvider","$locationProvider",function(e,n){n.html5Mode(!1).hashPrefix("!"),e.when("/",{templateUrl:"/views/index.html",controller:"mainCtrl"}).when("/sample",{templateUrl:"/views/sample/sample.html",controller:"sampleCtrl"}).otherwise({redirectTo:"/"})}])}();var spinner={},token="XXX";!function(){toastr.options={closeButton:!1,debug:!1,progressBar:!1,positionClass:"toast-bottom-right",onclick:null,showDuration:"300",hideDuration:"1000",timeOut:"5000",extendedTimeOut:"1000",showEasing:"swing",hideEasing:"linear",showMethod:"fadeIn",hideMethod:"fadeOut"};var e={lines:11,length:23,width:8,radius:40,corners:1,rotate:9,color:"#FFF",speed:1,trail:50,shadow:!1,hwaccel:!0,zIndex:2e9,top:"50%",left:"50%"},n=null;spinner.show=function(){var t=document.getElementById("spinner");null==n?n=new Spinner(e).spin(t):n.spin(t),$.blockUI({message:null,overlayCSS:{backgroundColor:"#5c5c5c"}})},spinner.hide=function(){var e=document.getElementById("spinner");n.stop(e),$.unblockUI()}}(),function(){app.controller("globalCtrl",["$rootScope","$scope",function(e,n){n.pageData=[{Name:"Home"},{Name:"Sample"}],n.directiveTest="HELLO WORLD",e.images="1495380793494.png",$(".upload-btn").on("click",function(){$("#upload-input").click(),$(".progress-bar").text("0%"),$(".progress-bar").width("0%")}),$("#upload-input").on("change",function(){var n=$(this).get(0).files;if(n.length>0){for(var t=new FormData,a=0;a<n.length;a++){var r=n[a];t.append("uploads[]",r,r.name)}$.ajax({url:"/upload/",type:"POST",data:t,processData:!1,contentType:!1,success:function(n){e.images=n,e.initmainMT()},xhr:function(){var e=new XMLHttpRequest;return e.upload.addEventListener("progress",function(e){if(e.lengthComputable){var n=e.loaded/e.total;n=parseInt(100*n),$(".progress-bar").text(n+"%"),$(".progress-bar").width(n+"%"),100===n&&$(".progress-bar").html("Done")}},!1),e}})}})}])}(),function(){app.directive("directiveSample",function(){return{restrict:"AEC",replace:!0,require:"ngModel",scope:!0,link:function(e,n,t,a){a.$render=function(){n.empty(),n.append(a.$viewValue)}}}})}(),function(){Date.prototype.addHours=function(e){return this.setHours(this.getHours()+e),this},app.filter("DateTrick",function(){return function(e){if(null!==e){var n=e.addHours(7);return n}return{}}})}(),function(){app.controller("mainCtrl",["$rootScope","$scope","mainService","searchEngineService",function(e,n,t,a){n.activePage=1,n.initMT=function(){t.GetSample().then(function(e){n.testData=e})},n.SubmitKeyword=function(){a.addKeyword({keywords:n.inputkeywords}).then(function(e){console.log(e)})},e.initmainMT=function(){console.log("---------- initmainMT ----------");var t=document.getElementById("image");t.src="uploads/"+e.images;var a=document.querySelectorAll(".preview");n.cropper=new Cropper(t,{ready:function(e,n){var t=this.cloneNode();t.className="",t.style.cssText="display: block;width: 100%;min-width: 0;min-height: 0;max-width: none;max-height: none;",angular.forEach(a,function(e){e.appendChild(t.cloneNode())})},aspectRatio:16/9,crop:function(e){var n=e.detail,t=this.cropper,r=t.getImageData(),o=n.width/n.height;angular.forEach(a,function(e){console.log("elem: ",e);var t=e.getElementsByTagName("img").item(0),a=e.offsetWidth,i=a/o,s=n.width/a;e.style.height=i+"px",t.style.width=r.naturalWidth/s+"px",t.style.height=r.naturalHeight/s+"px",t.style.marginLeft=-n.x/s+"px",t.style.marginTop=-n.y/s+"px"})}}),n.cropper.destroy(),n.cropper.replace(t.src,!1),console.log("555: ")},n.retateImage=function(e){"left"===e?n.cropper.rotate(-45):n.cropper.rotate(45)},n.getCroppedCanvas=function(){n.cropper.getCroppedCanvas({width:160,height:90}),n.cropper.getCroppedCanvas().toBlob(function(n){var t=new FormData;t.append("croppedImage",n),$.ajax({url:"/upload/",method:"POST",data:t,processData:!1,contentType:!1,success:function(n){console.log("Upload success",n),e.images=n,e.initmainMT()},error:function(){console.log("Upload error")}})})}}])}(),function(){app.factory("mainService",["$http","$q",function(e,n){var t={};return t.GetSample=function(){spinner.show();var t=n.defer();return e({method:"GET",url:"/sample"}).success(function(e){spinner.hide(),t.resolve(e)}).error(function(e){spinner.hide(),t.reject(e)}),t.promise},t}])}(),function(){app.controller("sampleCtrl",["$scope","$modal","sampleService",function(e,n,t){e.activePage=2,e.readSampleData=[],e.createSample=function(){t.createSample().then(function(n){"ERROR"!=n?(toastr.success("การบันทึกสำเร็จ","การบันทึกข้อมูล"),e.readSampleData.push(n)):toastr.warning("การบันทึกผิดพลาด"+n,"การบันทึกข้อมูล")})},e.createNewSample=function(){t.createNewSample(e.modalData).then(function(n){"ERROR"!=n?(toastr.success("การบันทึกสำเร็จ","การบันทึกข้อมูล"),e.readSampleData.push(n)):toastr.warning("การปรับปรุงผิดพลาด"+n,"การปรับปรุงผิดพลาด")})},e.modalData={},e.read=function(e,n){t.readSample(e).then(function(e){n(e)})},e.readAllSample=function(){t.readAllSample().then(function(n){"ERROR"!=n?e.readSampleData=n:toastr.warning("การอ่านข้อมูลผิดพลาด"+n,"การอ่านข้อมูลผิดพลาด")})},e.updateSample=function(){var n=e.currentID,a=e.currentIndex;t.updateSample(e.modalData,n).then(function(n){"ERROR"!=n?e.readSampleData[a]=e.modalData:toastr.warning("การปรับปรุงผิดพลาด"+n,"การปรับปรุงผิดพลาด")})},e.deleteConfirm=function(t,a){e.currentID=t,e.currentIndex=a,n({scope:e,template:"/views/sample/modal/sampleConfirm.html",show:!0})},e.deleteSample=function(){var n=e.currentID,a=e.currentIndex;t.deleteSample(n).then(function(n){"ERROR"!=n?e.readSampleData.splice(a,1):toastr.warning("การลบผิดพลาด"+n,"การลบผิดพลาด")})},e.checkData=function(){switch(e.modalMode){case"create":e.createNewSample();break;case"edit":e.updateSample()}},e.showSample=function(t,a,r){e.modalMode=t,e.currentID=a,e.currentIndex=r;var o=n({scope:e,template:"/views/sample/modal/sampleModal.html",show:!1});switch(t){case"create":e.modalData={},e.modalData.readOnly=!1,o.$promise.then(o.show);break;case"show":e.read(a,function(n){"ERROR"!=n?(o.$promise.then(o.show),e.modalData=n,e.modalData.bCreate=JSON.parse(n.bCreate),e.modalData.readOnly=!0):toastr.warning("การอ่านข้อมูลผิดพลาด"+n,"การอ่านข้อมูลผิดพลาด")});break;case"edit":e.read(a,function(n){"ERROR"!=n?(o.$promise.then(o.show),e.modalData=n,e.modalData.bCreate=JSON.parse(n.bCreate),e.modalData.readOnly=!1):toastr.warning("การอ่านข้อมูลผิดพลาด"+n,"การอ่านข้อมูลผิดพลาด")})}}}])}(),function(){app.factory("sampleService",["$http","$q",function(e,n){var t={};return t.createSample=function(){spinner.show();var t=n.defer();return e({method:"GET",url:"/sample/create",contentType:"application/json; charset=utf-8",dataType:"json",headers:{RequestVerificationToken:token}}).success(function(e){spinner.hide(),t.resolve(e)}).error(function(e){spinner.hide(),t.reject(e)}),t.promise},t.createNewSample=function(t){spinner.show();var a=n.defer();return e({method:"POST",url:"/sample/createnew",contentType:"application/json; charset=utf-8",data:{Name:t.Name,bCreate:t.bCreate},dataType:"json",headers:{RequestVerificationToken:token}}).success(function(e){spinner.hide(),a.resolve(e)}).error(function(e){spinner.hide(),a.reject(e)}),a.promise},t.readAllSample=function(){spinner.show();var t=n.defer();return e({method:"GET",url:"/sample/read",contentType:"application/json; charset=utf-8",dataType:"json",headers:{RequestVerificationToken:token}}).success(function(e){spinner.hide(),t.resolve(e)}).error(function(e){spinner.hide(),t.reject(e)}),t.promise},t.deleteSample=function(t){spinner.show();var a=n.defer();return e({method:"GET",url:"/sample/delete/"+t,contentType:"application/json; charset=utf-8",dataType:"json",headers:{RequestVerificationToken:token}}).success(function(e){spinner.hide(),a.resolve(e)}).error(function(e){spinner.hide(),a.reject(e)}),a.promise},t.readSample=function(t){spinner.show();var a=n.defer();return e({method:"GET",url:"/sample/read/"+t,contentType:"application/json; charset=utf-8",dataType:"json",headers:{RequestVerificationToken:token}}).success(function(e){spinner.hide(),a.resolve(e)}).error(function(e){spinner.hide(),a.reject(e)}),a.promise},t.updateSample=function(t,a){spinner.show();var r=n.defer();return e({method:"POST",url:"/sample/update/"+a,data:{Name:t.Name,bCreate:t.bCreate},contentType:"application/json; charset=utf-8",dataType:"json",headers:{RequestVerificationToken:token}}).success(function(e){spinner.hide(),r.resolve(e)}).error(function(e){spinner.hide(),r.reject(e)}),r.promise},t}])}(),function(){app.factory("searchEngineService",["$http","$q",function(e,n){var t={};return t.addKeyword=function(t){spinner.show();var a=n.defer();return console.log(t),e({method:"POST",url:"/searchengine/addKeyword",contentType:"application/json; charset=utf-8",data:t,dataType:"json",headers:{RequestVerificationToken:token}}).success(function(e){spinner.hide(),a.resolve(e)}).error(function(e){spinner.hide(),a.reject(e)}),a.promise},t}])}();
//# sourceMappingURL=data:application/json;charset=utf8;base64,
